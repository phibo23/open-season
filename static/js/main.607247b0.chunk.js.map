{"version":3,"sources":["DataContext.js","openLigaDB.js","Chart.js","TeamSelect.js","App.js","reportWebVitals.js","index.js"],"names":["DataContext","createContext","DataContextProvider","children","season","slidingWindowSize","teams","useAsync","a","fetch","response","json","matches","seasonId","useMemo","value","LeagueId","matchesPreviousSeason","derivedMatchData","filter","m","MatchIsFinished","flatMap","index","array","Team1","Team2","map","t","match","teamId","isHome","TeamId","result","MatchResults","find","mr","ResultTypeID","getFinalResult","points","resultType","calculatePoints","Math","sign","PointsTeam1","PointsTeam2","getResultType","dateTime","Date","MatchDateTimeUTC","goalsAgainst","goalsFor","matchDay","Group","GroupOrderID","opponentId","derivedMatchDataAggregates","dmd","pointsTotal","slice","i","reduce","c","data","Provider","Chart","selectedTeams","svgFontSize","svgHeight","svgMarginBottom","svgMarginLeft","svgMarginRight","svgMarginTop","svgWidth","useContext","derivedMatchDataAggregatesSelectedTeams","includes","svgRef","useRef","useEffect","d3","current","attr","selectAll","remove","x","domain","range","y","d","append","call","g","style","select","line","join","group","path","clone","formatValue","text","ShortName","key","reverse","ref","defaultProps","useStyles","makeStyles","theme","chips","display","flexWrap","chip","margin","TeamSelect","onChange","classes","FormControl","InputLabel","id","Select","labelId","multiple","renderValue","selected","className","team","Chip","label","TeamName","MenuItem","root","drawer","width","flexShrink","drawerPaper","padding","spacing","content","flexGrow","backgroundColor","palette","background","default","footer","position","bottom","App","useState","setSeason","setSlidingWindowSize","setSelectedTeams","height","useWindowSize","useMeasure","mainRef","CssBaseline","Drawer","anchor","paper","variant","TextField","defaultValue","e","parseInt","target","SelectProps","native","s","inputProps","max","min","type","Link","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.607247b0.chunk.js","sourcesContent":["import { createContext, useMemo } from \"react\"\nimport { useAsync } from \"react-use\"\nimport { calculatePoints, getFinalResult, getResultType, isMatchHome } from \"./openLigaDB\"\n\nexport const DataContext = createContext({})\n\nconst DataContextProvider = ({\n  children,\n  season,\n  slidingWindowSize,\n}) => {\n  const teams = useAsync(async () => {\n    const response = await fetch(`https://www.openligadb.de/api/getavailableteams/bl1/${season}`)\n    return response.json()\n  }, [season])\n\n  const matches = useAsync(async () => {\n    const response = await fetch(`https://www.openligadb.de/api/getmatchdata/bl1/${season}`)\n    return response.json()\n  }, [season])\n\n  const seasonId = useMemo(() => {\n    return matches.value?.[0].LeagueId\n  }, [matches.value])\n\n  const matchesPreviousSeason = useAsync(async () => {\n    const response = await fetch(`https://www.openligadb.de/api/getmatchdata/bl1/${season-1}`)\n    return response.json()\n  }, [season])\n\n  const derivedMatchData = useMemo(() => {\n    // merge matches of previous season to enable cross season aggregate statistics\n    return [\n      ...matchesPreviousSeason.value ?? [],\n      ...matches.value ?? [],\n    ]\n      // filter out unfinished matches\n      ?.filter(m => m.MatchIsFinished === true)\n      // flatMap enables returning multiple values for each entry in original array\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap\n      ?.flatMap((m, index, array) => {\n        // create one value for each team in match\n        return [m.Team1, m.Team2].map((t) => {\n          const isHome = isMatchHome(m, t.TeamId)\n          const result = getFinalResult(m)\n          const resultType = getResultType(result)\n          const points = calculatePoints(resultType, isHome)\n\n          return {\n            dateTime: new Date(m?.MatchDateTimeUTC),\n            goalsAgainst: isHome ? result?.PointsTeam2 : result?.PointsTeam1,\n            goalsFor: isHome ? result?.PointsTeam1 : result?.PointsTeam2,\n            isHome,\n            matchDay: m?.Group.GroupOrderID,\n            opponentId: isHome ? m?.Team2.TeamId : m?.Team1.TeamId,\n            points,\n            seasonId: m.LeagueId,\n            teamId: isHome ? m?.Team1.TeamId : m?.Team2.TeamId,\n          }\n        })\n    }) ?? []\n  }, [matches.value, matchesPreviousSeason.value])\n\n  const derivedMatchDataAggregates = useMemo(() => {\n    return derivedMatchData\n      ?.map((dmd, index, array) => {\n        const pointsTotal = array\n          // cut off everything newer than current index\n          .slice(0, index+1)\n          // find all entries that belong to current team\n          .filter(i => i.teamId === dmd.teamId)\n          // slice to sliding window size\n          .slice(0-slidingWindowSize)\n          // sum up points\n          .reduce((a, c, index, array) => a + c.points, 0)\n        return {\n          ...dmd,\n          pointsTotal\n        }\n      })\n      .filter((dmd) => dmd.seasonId === seasonId)\n  }, [derivedMatchData, seasonId, slidingWindowSize])\n\n  const data = useMemo(() => {\n    return {\n      season,\n      derivedMatchData,\n      derivedMatchDataAggregates,\n      teams,\n    }\n  }, [derivedMatchData, derivedMatchDataAggregates, season, teams])\n\n  return (\n    <DataContext.Provider value={data}>\n      {children}\n    </DataContext.Provider>\n  )\n}\n\nexport default DataContextProvider","export const isMatchHome = (match, teamId) => {\n  return match?.Team1.TeamId === teamId\n}\n\nexport const getFinalResult = (match) => {\n  // match results also contain half time result\n  return match?.MatchResults?.find((mr) => mr?.ResultTypeID === 2)\n}\n\nexport const getResultType = (result) => {\n  // determine if home or away team won or draw\n  // https://stackoverflow.com/a/34852894\n  return result && Math.sign(result.PointsTeam1 - result.PointsTeam2)\n}\n\nexport const calculatePoints = (resultType, isHome) => {\n  // award points depending on result type and team\n  let points = 0\n  if ((resultType === 1 && isHome) || (resultType === -1 && !isHome)) {\n    points = 3\n  } else if (resultType === 0) {\n    points = 1\n  }\n  return points  \n}","import { useContext, useEffect, useMemo, useRef } from \"react\"\nimport * as d3 from 'd3'\nimport { DataContext } from \"./DataContext\"\n\n/**\n * based on https://observablehq.com/@mbostock/cancer-survival-rates\n */\nconst Chart = ({\n  selectedTeams,\n  svgFontSize,\n  svgHeight,\n  svgMarginBottom,\n  svgMarginLeft,\n  svgMarginRight,\n  svgMarginTop,\n  svgWidth,\n}) => {\n  const {\n    derivedMatchData,\n    derivedMatchDataAggregates,\n    teams,  \n  } = useContext(DataContext)\n\n  const derivedMatchDataAggregatesSelectedTeams = useMemo(() => {\n    return derivedMatchDataAggregates.filter(dmd => selectedTeams.includes(dmd.teamId))\n  }, [derivedMatchDataAggregates, selectedTeams])\n\n  const svgRef = useRef(null)\n  useEffect(() => {\n    // setup svg\n    d3.select(svgRef.current)\n      .attr(\"viewBox\", [0, 0, svgWidth, svgHeight])\n      .attr(\"font-family\", \"sans-serif\")\n      .attr(\"font-size\", svgFontSize)\n      .selectAll('*').remove()\n\n    // scale x\n    const x = d3.scalePoint()\n      .domain(derivedMatchDataAggregates?.map((dmd) => dmd.matchDay))\n      .range([svgMarginLeft, svgWidth - svgMarginRight])\n\n    // scale y\n    const y = d3.scaleLinear()\n      .domain(d3.extent(derivedMatchDataAggregates, d => d.pointsTotal))\n      .range([svgHeight - svgMarginBottom, svgMarginTop])\n\n    // define x axis\n    const xAxis = (g) => g\n      .style('font-size', svgFontSize)\n      .attr(\"transform\", `translate(0,${svgMarginTop})`)\n      .call(d3.axisTop(x))\n      .call(g => g.select(\".domain\").remove())\n\n    // draw x axis\n    d3.select(svgRef.current).append('g')\n      .call(xAxis)\n\n    // define line\n    const line = d3.line()\n      .x(d => x(d.matchDay))\n      .y(d => y(d.pointsTotal))\n    \n    // draw lines for unselected teams\n    d3.select(svgRef.current).append('g')\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"#000\")\n      .selectAll(\"path\")\n      .data(d3.group(derivedMatchDataAggregates.filter(dmd => !selectedTeams.includes(dmd.teamId)), d => d.teamId))\n      .join(\"path\")\n        .attr(\"d\", ([, group]) => line(group))\n        .attr(\"stroke\", '#aaa')\n        .call(path => path.clone(true))\n        .attr(\"stroke\", \"#fff\")\n        .attr(\"stroke-width\", 2)\n\n    // draw lines for selected teams afterwards so they are displayed on top\n    d3.select(svgRef.current).append('g')\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"#000\")\n      .selectAll(\"path\")\n      .data(d3.group(derivedMatchDataAggregatesSelectedTeams, d => d.teamId))\n      .join(\"path\")\n        .attr(\"d\", ([, group]) => line(group))\n        .attr(\"stroke\", '#f00')\n        .call(path => path.clone(true))\n        .attr(\"stroke\", \"#fff\")\n        .attr(\"stroke-width\", 2)\n  \n    // draw background for values\n    d3.select(svgRef.current).append(\"g\")\n        .attr(\"fill\", \"#fff\")\n      .selectAll(\"circle\")\n      .data(derivedMatchDataAggregatesSelectedTeams)\n      .join(\"circle\")\n        .attr(\"cx\", d => x(d.matchDay))\n        .attr(\"cy\", d => y(d.pointsTotal))\n        .attr(\"r\", svgFontSize-1)\n\n    // define format for values\n    const formatValue = d3.format(\",\")\n    \n    // draw values\n    d3.select(svgRef.current).append(\"g\")\n        .attr(\"text-anchor\", \"middle\")\n      .selectAll(\"text\")\n      .data(derivedMatchDataAggregatesSelectedTeams)\n      .join(\"text\")\n        .attr(\"x\", d => x(d.matchDay))\n        .attr(\"y\", d => y(d.pointsTotal))\n        .attr(\"dy\", \"0.35em\")\n        .text(d => formatValue(d.pointsTotal))\n\n    // draw labels left\n    d3.select(svgRef.current).append(\"g\")\n        .attr(\"text-anchor\", \"end\")\n      .selectAll(\"text\")\n      .data(d3.groups(derivedMatchDataAggregates, d => teams.value?.find(t => t.TeamId === d.teamId)?.ShortName))\n      .join(\"text\")\n        .attr(\"x\", svgMarginLeft - 10)\n        .attr(\"y\", ([key, [d]]) => y(d.pointsTotal) + (key === \"Colon\") * 10)\n        .attr(\"dy\", \"0.35em\")\n        .text(([key]) => key)\n\n    // draw labels right\n    d3.select(svgRef.current).append(\"g\")\n        .attr(\"text-anchor\", \"start\")\n      .selectAll(\"text\")\n      // reverse because need y position for last entry\n      .data(d3.groups([...derivedMatchDataAggregates].reverse(), d => teams.value?.find(t => t.TeamId === d.teamId)?.ShortName))\n      .join(\"text\")\n        .attr(\"x\", svgWidth - svgMarginRight + 10)\n        .attr(\"y\", ([key, [d]]) => y(d.pointsTotal) + (key === \"Colon\") * 10)\n        .attr(\"dy\", \"0.35em\")\n        .text(([key]) => key)\n  }, [derivedMatchData, derivedMatchDataAggregates, derivedMatchDataAggregatesSelectedTeams, selectedTeams, svgFontSize, svgHeight, svgMarginBottom, svgMarginLeft, svgMarginRight, svgMarginTop, svgWidth, teams])\n\n  return (\n    <svg ref={svgRef}/>\n  )\n}\n\nChart.defaultProps = {\n  svgFontSize: 5,\n  svgHeight: 200,\n  svgMarginBottom: 20,\n  svgMarginLeft: 40,\n  svgMarginRight: 40,\n  svgMarginTop: 40,\n  svgWidth: 500,\n}\n\nexport default Chart","import { Chip, FormControl, InputLabel, makeStyles, MenuItem, Select } from \"@material-ui/core\"\nimport { useContext } from \"react\"\nimport { DataContext } from \"./DataContext\"\n\n/**\n * based on https://material-ui.com/components/selects/#multiple-select\n */\nconst TeamSelect = ({\n  onChange,\n  value,\n}) => {\n  const {\n    teams,\n  } = useContext(DataContext)\n\n  const classes = useStyles()\n\n  return (\n    <FormControl>\n      <InputLabel id=\"demo-mutiple-chip-label\">Teams</InputLabel>\n      <Select\n        labelId=\"demo-mutiple-chip-label\"\n        multiple\n        onChange={onChange}\n        renderValue={(selected) => (\n          <div className={classes.chips}>\n            {selected.map((value) => {\n              const team = teams.value?.find(t => t.TeamId === value)\n              return(\n                <Chip key={value} label={team?.ShortName || team?.TeamName} className={classes.chip} />\n              )\n            })}\n          </div>\n        )}\n        value={value}\n      >\n        {teams.value?.map((t) => (\n          <MenuItem key={t.TeamId} value={t.TeamId}>\n            {t.ShortName || t.TeamName}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  )\n}\n\nconst useStyles = makeStyles((theme) => ({\n  chips: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  chip: {\n    margin: 2,\n  },\n}))\n\nexport default TeamSelect","import { CssBaseline, Drawer, Link, makeStyles, TextField } from '@material-ui/core'\nimport { useState } from 'react'\nimport { useMeasure, useWindowSize } from 'react-use'\n\nimport Chart from './Chart'\nimport DataContextProvider from './DataContext'\nimport TeamSelect from './TeamSelect'\n\nconst App = () => {\n  const [season, setSeason] = useState(2020)\n  const [slidingWindowSize, setSlidingWindowSize] = useState(34)\n  const [selectedTeams, setSelectedTeams] = useState([])\n\n  const {height} = useWindowSize()\n  const [mainRef, {width}] = useMeasure()\n\n  const classes = useStyles()\n\n  return (\n    <div>\n      <DataContextProvider\n        season={season}\n        slidingWindowSize={slidingWindowSize}\n      >\n        <div className={classes.root}>\n          <CssBaseline />\n          <Drawer\n            anchor=\"left\"\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            className={classes.drawer}\n            variant='permanent'\n          >\n            <TextField\n              defaultValue={2020}\n              label='Season'\n              onChange={(e) => { setSeason(parseInt(e.target.value, 10)) }}\n              select\n              SelectProps={{\n                native: true,\n              }}\n            >\n              {[\n                // XXX for some reason these dont work correctly\n                // 2008, 2009, 2010,\n                2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020\n              ].map(s => (\n                <option key={s} value={s}>{s}/{s+1}</option>\n              ))}\n            </TextField>\n            <TextField\n              defaultValue={34}\n              inputProps={{\n                max: 34,\n                min: 5,\n              }}\n              label='Matches'\n              onChange={(e) => { setSlidingWindowSize(parseInt(e.target.value, 10)) }}\n              type='number'\n            />\n            <TeamSelect\n              onChange={(e) => {\n                setSelectedTeams(e.target.value)\n              }}\n              value={selectedTeams}\n            />\n            <footer className={classes.footer}>\n              <Link href='https://github.com/phibo23/open-season' target='_blank' variant='caption'>github.com/phibo23/open-season</Link>\n            </footer>\n          </Drawer>\n          <main className={classes.content} ref={mainRef}>\n            <Chart\n              selectedTeams={selectedTeams}\n              svgHeight={height}\n              svgWidth={width}\n              svgFontSize={12}\n              svgMarginLeft={80}\n              svgMarginRight={80}\n            />\n          </main>\n        </div>\n      </DataContextProvider>\n    </div>\n  )\n}\n\nconst drawerWidth = 200;\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    padding: theme.spacing(),\n    width: drawerWidth,\n  },\n  content: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.default,\n  },\n  footer: {\n    position: 'absolute',\n    bottom: 0\n  }\n}))\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}